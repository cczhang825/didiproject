===============复习昨天的内容
git 代码版本的控制工作，git是分布式，每一个人的电脑上都可以有本地仓库。

创建一个本地仓库：git init
在工作区进行项目的开发：创建文件，编码
把工作区的代码提交给暂存区：git add *   此时还没有形成版本
把暂存区的代码提交给历史区：git commit -m “xxx”  就会在历史区形成一个版本

辅助命令：
    git log
    git status




======================git的分支管理
git的精髓就是分支管理

默认情况下，有一个master主分支

一般公司下，在公司里面，大家不会都在同一个master主分支上面进行开发。
一般每一个人都有自己的一个分支，在自己的分支上进行项目开发，如一个模块开发完毕，
就可以切换到master主分支，把你的分之合并到master主分支上面。

创建一个分支:git branch 
    比如说我要创建一个testing分支，命令：git branch testing
    git branch 后面不加分支名，
    默认情况下，它并不会切换到testing分支上面，
            切换 命令：git checkout testing (git checkout 分支名)
            此时就切换到了testing分支了

删除一个分支：在本地删除一个分支： git branch -D <本地分支>
            在github远程端删除一个分支： git push origin :<远程端分支>
    我要删除testing分支 ：git branch -d testing
    
    如果要删除一个分支，必须要切换到master分支，才能删除其它的分支 

分支切换会改变工作区的文件，记住：在切换分支之前，先提交一下，形成版本。

合并分支：
    通过git merge 分支名
    只有在master分支上才能合并其它分支


=========================模拟真实的应用场景
1)要开发一个项目，首选项目组长会在远程仓库创建一个项目的仓库。在github上面创建一个远程仓库。
2)开发人员把远程仓库克隆下来。git clone 远程仓库地址
3)创建一个debug56的分支，并切换到这个分支上
    git branch debug56
    git checkout debug56
    以上两个命令可以使用git checkout -b debug56
4)愉快的去修改56号bug，还没有修复完毕，老板打电话，说有一个严重的bug，赶紧搞一下。
5)创建一个hotbug的分支，修复bug，修复ok了。
6)回到主分支，把hotbug合并到master主分支上
7)删除hotbug
8)接着回到debug56分支继续修复56号bug。



工作流：
    开发taobao项目。
    第一个程序员，都会创建一个属于自己的分支。
    在自己的分支上开展工作。
    》》测试组对你，主分支(一般都是将要发布或线上版本)上面有一个小小的bug，需要解决一下，
        bug是56#bug。
        再创建一个分支去修复这个bug。然后，你就创建了一个分支(debug56)，去修改bug....
    》》老板打电话说主分支上有一个非常严重的bug，你赶紧修复一下。
        再创建一个分支去修复这个严重的bug，分支叫(hotbug)，去修改严重额bug。
        当严重的bug修复ok了，把hotbug合并到主分支上面。
    然后回到debug56，继续修改之前测试组让修改的bug的分支56#bug。








======================下午安排
1.分支安排，尽量操作一遍  实在不懂，先不用学。
2.本地仓库和远程仓库进行复习，以做项目的角度再一次模拟项目开发。


============================================模拟项目开发
第一步：项目经理（项目组长） 创建一个本地仓库。
第二步：项目经理（项目组长） 创建一个远程仓库。
第三步：项目经理（项目组长） 把本地仓库与远程仓库关联。
第四步：项目经理（项目组长） 把本地仓库的出示文件推送到远程仓库。
第五步：项目组成员          把远程仓库克隆到本地。（组长的远程仓库地址）
    如果只有一台设备，所以要更改已配置的用户名和邮箱（先删除再重新配置）
    删除已配置的用户名和密码:   
                $ git config --global --unset user.name 用户名
                $ git config --global --unset user.email 邮箱
    配置个人用户名和密码：
                & git config --global user.name 用户名
                & git config --global user.email 邮箱
第六步：项目经理（项目组长）  邀请成员加入项目团队（协作开发）。
        在github中配置，邀请完后，会有一个邀请链接（成员收到邮件）

第七步：项目组成员          进行项目开发，尝试把项目推送到远程仓库
，                         如果接受了邀请，那么可以上传成功。
第八步：项目经理（项目组长） 更新成员提交的内容。 git fetch didi

======================使用github托管静态网页(把项目发布到线上，所有人都可以访问)
内容：Hello，world！